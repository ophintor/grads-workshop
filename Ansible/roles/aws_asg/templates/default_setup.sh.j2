#!/bin/bash

# Output commands and results to log file for testing
# Uncomment and add -x to shebang above to enable
#exec > /tmp/user-data.log 2>&1

# Setup environment variables that allow http traffic to be routed through the Squid Proxy server with the exception of AWS specific calls.
{% if item.name != 'FWDPXY' %}
export http_proxy=http://fwdpxy.con-{{ account_env | lower }}.{{ account_env | lower }}.aws.ds.cloud:3128/
export https_proxy=https://fwdpxy.con-{{ account_env | lower }}.{{ account_env | lower }}.aws.ds.cloud:3128/
export NO_PROXY=169.254.169.254,ec2.eu-west-2.amazonaws.com
{% else %}
sed -i --follow-symlinks "s/^proxy.*/#proxy=/g" /etc/yum.conf
{% endif %}

# Collect some local details which will be needed later in this script
export AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
export REGION=$(echo $AZ | sed 's/[abc]$//')
export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

ipaddr=`/sbin/ifconfig eth0 | grep "inet " | awk  '{print $2}'` # Added space after inet to remove ipv6 address(es)

AWS_CLI="/root/.local/bin/aws"
if [ ! -x $AWS_CLI ]; then
  chmod 755 $AWS_CLI
fi
SHORT_INSTANCE_ID=`sed 's/i-//' <<< "$INSTANCEID" | cut -c 1-9`
DOMAIN_APEX="{{ domains[component] }}"
INSTANCE_HOSTNAME="{{ item.name | lower }}-"$SHORT_INSTANCE_ID".$DOMAIN_APEX"

export NETSCRIPT=/etc/sysconfig/network-scripts
# Set up hostname
hostnamectl set-hostname --static $INSTANCE_HOSTNAME

$AWS_CLI ec2 create-tags --region $REGION --resources $INSTANCEID --tags Key="Name",Value="$INSTANCE_HOSTNAME"
$AWS_CLI ec2 create-tags --region $REGION --resources $INSTANCEID --tags Key="DomainApex",Value="$DOMAIN_APEX"

# Get any volumes required
{% if item.volumes is defined %}
{% for vol in item.volumes %}
volume_id_{{ loop.index }}=$($AWS_CLI ec2 describe-volumes --region $REGION --filters Name=status,Values=available Name=tag:Name,Values={{ vol.name }} | grep "VolumeId" | awk '{print $2}' | sed 's/[\",]//g')

if [[ $volume_id_{{ loop.index }} ]]
then
	$AWS_CLI ec2 attach-volume --region $REGION --device /dev/sdh --instance-id $INSTANCEID --volume-id $volume_id_{{ loop.index }}
fi
{% endfor %}
{% endif %}

# Attach any network interfaces required.
{% if item.interfaces is defined %}
{% for interface in item.interfaces %}

if [ "${AZ}" == "{{ interface.availability_zone }}" ]; then
  interface_name="{{ interface.name }}"
fi
{% endfor %}

interface_id=$($AWS_CLI ec2 describe-network-interfaces --region $REGION --filters Name=status,Values=available --filters Name=tag:Name,Values=${interface_name} | grep NetworkInterfaceId | awk '{print $2 }' | sed 's/[\",]//g')
echo "$interface_id"
if [ ! -z $interface_id ]; then
  netblock=$(ip route list | grep -v default | awk '{print $1}')
  net_gw=$(ip route list | grep default | awk '{print $3}')
  $AWS_CLI ec2 attach-network-interface --region $REGION --instance-id $INSTANCEID --network-interface-id $interface_id --device-index 1
  ipaddr_eth1=$($AWS_CLI ec2 describe-network-interfaces --region $REGION --filters Name=status,Values=available --filters Name=tag:Name,Values=${interface_name} | grep PrivateIpAddress | tail -n 1 | awk '{print $2}' | sed 's/[\",]//g')
  macaddr_eth1=$($AWS_CLI ec2 describe-network-interfaces --region $REGION --filters Name=status,Values=available --filters Name=tag:Name,Values=${interface_name} | grep Mac | awk '{print $2}' | sed 's/[\",]//g')
  # Create Interface config file
  cat >${NETSCRIPT}/ifcfg-eth1 <<EOF
BOOTPROTO=dhcp
DEVICE=eth1
HWADDR=${macaddr_eth1}
ONBOOT=yes
TYPE=Ethernet
USERCTL=no
ZONE=internal
EOF
  #Â Create new routing tables
  cat >${NETSCRIPT}/route-eth0 <<EOF
${netblock} dev eth0 table 10000
default via ${net_gw} dev eth0 table 10000
EOF
  cat >${NETSCRIPT}/route-eth1 <<EOF
${netblock} dev eth1 table 10001
default via ${net_gw} dev eth1 table 10001
EOF
  # Create routing rules for new route tables
  echo "from $ipaddr lookup 10000" > ${NETSCRIPT}/rule-eth0
  echo "from $ipaddr_eth1 lookup 10001" > ${NETSCRIPT}/rule-eth1

  # Wait for eth1 to be attached ....
  while [ ! `ifconfig eth1` ]; do
      sleep 2
  done
  # Finally, restart network service
  systemctl restart network
fi
{% endif %}

# Tag all our volumes

default_tags='{{ default_tags | to_json }}'
volumes=$($AWS_CLI ec2 describe-volumes  --region=${REGION} --filters Name=attachment.instance-id,Values=$INSTANCEID)

for vol_id in $(echo $volumes|jq -r '.Volumes[].VolumeId')
do
  attachment_info=$(echo $volumes|jq ".Volumes[].Attachments[] | select (.VolumeId==\"$vol_id\")")
  device=$(echo $attachment_info|jq -r '.Device')
  num_existing_tags=$(echo $volumes|jq ".Volumes[] | select (.VolumeId==\"$vol_id\") | .Tags | length")
  # only add tags to volumes with none
  if [[ $num_existing_tags -eq 0 ]]; then
    tags=""
    # create list of all our default tags
    for key in $(echo $default_tags|jq -r 'keys[]')
    do
      value=$(echo $default_tags|jq -r ".$key")
      tags="${tags}Key=$key,Value=\"$value\" "
    done
    # add our name tag
    tags="${tags}Key=Name,Value=\"$(hostname -s)-${device}-VOL\""
    eval $AWS_CLI ec2 create-tags --region=${REGION} --resources ${vol_id} --tags ${tags}
  fi
done

# the awscli tools interfere with the IPA registration due to conflicting library versions so once we have performed the
# required actions, we'll remove the package
pip uninstall -y awscli
rm -rf /root/.local/

systemctl restart firewalld
/opt/puppetlabs/bin/puppet config set environment {{ puppet_env }} --section main

{% if env == 'devint' %}
if `grep -qi ^runinterval /etc/puppetlabs/puppet/puppet.conf`
then
  sed -i --follow-symlinks "s/^runinterval.*/runinterval=300/g" /etc/puppetlabs/puppet/puppet.conf
else
  echo -e "\n" | tee -a /etc/puppetlabs/puppet/puppet.conf
  echo -e "runinterval=300" | tee -a /etc/puppetlabs/puppet/puppet.conf
fi
{% endif %}
echo -e "FACTER_environment={{ puppet_env }}" | tee -a /etc/sysconfig/puppet
mkdir -p /etc/puppetlabs/code/environments/{{ puppet_env }}
/opt/puppetlabs/bin/puppet resource service puppet ensure=running enable=true
